#题目：
#给出一个仅包含字符'('和')'的字符串，计算最长的格式正确的括号子串的长度。
# 对于字符串"(()"来说，最长的格式正确的子串是"()"，长度为2.
# 再举一个例子：对于字符串")()())",来说，最长的格式正确的子串是"()()"，长度为4.

#题解，没想出来，看的答案
#我们定义dp[i] 表示以下标i字符结尾的最长有效括号的长度。我们将dp数组全部初始化为0 。
# 显然有效的子串一定以‘)’ 结尾，因此我们可以知道以‘(’ 结尾的子串对应的dp 值必定为0 ，我们只需要求解‘)’ 在dp 数组中对应位置的值。
# 我们从前往后遍历字符串求解dp 值，我们每两个字符检查一次：s[i] =‘)’ 且 s[i - 1] =‘(’，也就是字符串形如“……()”，我们可以推出：dp[i]=dp[i−2]+2
# 我们可以进行这样的转移，是因为结束部分的 "()" 是一个有效子字符串，并且将之前有效子字符串的长度增加了 22 。
# s[i] =‘)’ 且 s[i - 1] =‘)’，也就是字符串形如 “……))”，我们可以推出：如果 s[i - −dp[i−1]−1]=‘(’，那么dp[i]=dp[i−1]+dp[i−dp[i−1]−2]+2
# 我们考虑如果倒数第二个‘)’ 是一个有效子字符串的一部分（记作 sub_s），对于最后一个‘)’ ，如果它是一个更长子字符串的一部分，那么它一定有一个对应的 ‘(’ ，
# 且它的位置在倒数第二个)’ 所在的有效子字符串的前面（也就是subs的前面）。因此，如果子字符串subs的前面恰好是 ‘(’ ，
# 那么我们就用 22 加上subs的长度（dp[i−1]）去更新dp[i]。同时，我们也会把有效子串“(subs)” 之前的有效子串的长度也加上，也就是再加上dp[i−dp[i−1]−2]。最后的答案即为dp 数组中的最大值。


class Solution:
    def longestValidParentheses(self , s ):
        if not s:
            return 0
        n=len(s)
        dp=[0]*n
        for i in range(1,n):
            if s[i]=='(':
                continue
            else:
                j=i-1-dp[i-1]
                if s[j]=='(':
                    if j>0:
                        dp[i]=2+dp[i-1]+dp[j-1]
                    else:
                        dp[i]=2+dp[i-1]
        return max(dp)
a = Solution()
a.longestValidParentheses("(()")

